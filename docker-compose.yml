version: "3.8"

networks:
  replink-network:
    driver: bridge

services:
  # Databases
  neo4j:
    image: neo4j:5.15
    container_name: replink-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - replink-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cypher-shell -u ${NEO4J_USER} -p ${NEO4J_PASSWORD} 'RETURN 1'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Queue (Optional)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: replink-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: replink-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservices
  content-api:
    build:
      context: ./services/content-api
      dockerfile: Dockerfile
    container_name: replink-content-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Neo4j__Uri=${NEO4J_URI}
      - Neo4j__User=${NEO4J_USER}
      - Neo4j__Password=${NEO4J_PASSWORD}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/content/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  fitness-api:
    build:
      context: ./services/fitness-api
      dockerfile: Dockerfile
    container_name: replink-fitness-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Neo4j__Uri=${NEO4J_URI}
      - Neo4j__User=${NEO4J_USER}
      - Neo4j__Password=${NEO4J_PASSWORD}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/fitness/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-api:
    build:
      context: ./services/auth-api
      dockerfile: Dockerfile
    container_name: replink-auth-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Neo4j__Uri=${NEO4J_URI}
      - Neo4j__User=${NEO4J_USER}
      - Neo4j__Password=${NEO4J_PASSWORD}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  users-api:
    build:
      context: ./services/users-api
      dockerfile: Dockerfile
    container_name: replink-users-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Neo4j__Uri=${NEO4J_URI}
      - Neo4j__User=${NEO4J_USER}
      - Neo4j__Password=${NEO4J_PASSWORD}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  socialgraph-api:
    build:
      context: ./services/socialgraph-api
      dockerfile: Dockerfile
    container_name: replink-socialgraph-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Neo4j__Uri=${NEO4J_URI}
      - Neo4j__User=${NEO4J_USER}
      - Neo4j__Password=${NEO4J_PASSWORD}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/graph/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  feed-api:
    build:
      context: ./services/feed-api
      dockerfile: Dockerfile
    container_name: replink-feed-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - Services__SocialGraphApi=${SOCIALGRAPH_API_URL}
      - Services__ContentApi=http://content-api:80
      - Redis__ConnectionString=${REDIS_HOST}:${REDIS_PORT}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/feed/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  analytics-api:
    build:
      context: ./services/analytics-api
      dockerfile: Dockerfile
    container_name: replink-analytics-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - Redis__ConnectionString=${REDIS_HOST}:${REDIS_PORT}
      - Services__ContentApi=http://content-api:80
      - Services__FitnessApi=http://fitness-api:80
      - Services__SocialGraphApi=http://socialgraph-api:80
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/analytics/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  gateway:
    build:
      context: ./gateway/OcelotApiGw
      dockerfile: Dockerfile
    container_name: replink-gateway
    ports:
      - "8000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
    depends_on:
      content-api:
        condition: service_healthy
      fitness-api:
        condition: service_healthy
      auth-api:
        condition: service_healthy
      users-api:
        condition: service_healthy
      socialgraph-api:
        condition: service_healthy
      feed-api:
        condition: service_healthy
      analytics-api:
        condition: service_healthy
    networks:
      - replink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  neo4j-data:
  neo4j-logs:
  rabbitmq-data:
  redis-data:
